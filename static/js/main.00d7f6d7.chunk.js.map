{"version":3,"sources":["Components/card/Card.component.jsx","Components/card-list/card-list.component.jsx","Components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","styled","monster","className","alt","src","id","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yvBAIA,IAQaA,EAAOC,aARN,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAASC,EAAX,EAAWA,UAAX,OACV,yBAAKA,UAAWA,GACZ,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAQI,GAAlC,eACtB,4BAAMJ,EAAQK,MACd,4BAAML,EAAQM,UAIFP,CAAH,K,oMCLjB,IAQaQ,EAAWR,aARN,SAAC,GAAD,IAAES,EAAF,EAAEA,SAAUP,EAAZ,EAAYA,UAAZ,OACd,yBAAKA,UAAWA,GAEZO,EAASC,KAAI,SAAAT,GAAO,OAAI,kBAACF,EAAD,CAAMY,IAAKV,EAAQI,GAAIJ,QAASA,UAKxCD,CAAH,K,0OCZrB,IASaY,EAAYZ,aATN,SAAC,GAAD,IAAEa,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAcZ,EAA7B,EAA6BA,UAA7B,OACf,2BACIa,KAAK,SACLb,UAAWA,EACXW,YAAaA,EACbG,SAAUF,MAIOd,CAAH,KCyBPiB,E,kDA/Bb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXT,SAAU,GACVU,YAAa,IAJJ,E,gEAQO,IAAD,OACjBC,MAAM,8CACLC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAEhB,SAAUe,S,+BAGlC,IAAD,SAC6BE,KAAKR,MAAhCT,EADF,EACEA,SAAUU,EADZ,EACYA,YACZQ,EAAmBlB,EAASmB,QAAQ,SAAA3B,GAAO,OAC/CA,EAAQK,KAAKuB,cAAcC,SAASX,EAAYU,kBAElD,OACE,yBAAK3B,UAAU,OACb,kBAACU,EAAD,CACEC,YAAY,kBACZC,aAAc,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAAEN,YAAaY,EAAEC,OAAOC,WAE3D,kBAACzB,EAAD,CAAUC,SAAUkB,S,GA1BVO,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.00d7f6d7.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\n\r\nconst _Card = ({monster, className}) => (\r\n    <div className={className}>\r\n        <img alt=\"monster\" src={`https://robohash.org/${monster.id}?set=set2`}/>\r\n        <h1>{ monster.name }</h1>\r\n        <h2>{ monster.email }</h2>\r\n    </div>\r\n)\r\n\r\nexport const Card = styled(_Card)`\r\n    display: flex;\r\n    flex-direction: column;\r\n    background-color: #95dada;\r\n    border: 1px solid grey;\r\n    border-radius: 5px;\r\n    padding: 25px;\r\n    cursor: pointer;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    backface-visibility: hidden;\r\n    transform: translateZ(0);\r\n    transition: transform 0.25s ease-out; \r\n\r\n    &:hover {\r\n        transform: scale(1.05);\r\n    }\r\n\r\n`;","import React from 'react';\r\nimport styled from 'styled-components'\r\nimport { Card } from '../card/Card.component'\r\n \r\n\r\n\r\n \r\nconst _CardList = ({monsters, className}) => (\r\n    <div className={className} > \r\n    {\r\n        monsters.map(monster => <Card key={monster.id} monster={monster}/>)\r\n    }\r\n    </div>\r\n)\r\n\r\nexport const CardList = styled(_CardList)`\r\n    width: 85vw;\r\n    margin: 0 auto;\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr 1fr 1fr;\r\n    grid-gap: 20px;\r\n`;\r\n","import React from 'react'\nimport styled from \"styled-components\";\n\nconst _SearchBox = ({placeholder, handleChange, className }) => (\n    <input \n        type='search' \n        className={className} \n        placeholder={placeholder} \n        onChange={handleChange} \n    />\n)\n\nexport const SearchBox = styled(_SearchBox)`\n\n    -webkit-appearance: none;\n    border: none;\n    outline: none;\n    padding: 10px;\n    width: 150px;\n    line-height: 30px;\n    margin-bottom: 30px;\n\n`","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList } from './Components/card-list/card-list.component';\nimport { SearchBox } from './Components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then( response => response.json())\n    .then(users => this.setState({ monsters: users }))\n  }\n\n  render(){\n    const { monsters, searchField  } = this.state;\n    const filteredMonsters = monsters.filter( monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      )\n    return (\n      <div className=\"App\">\n        <SearchBox\n          placeholder=\"search monsters\" \n          handleChange={e => this.setState({ searchField: e.target.value })}\n        />\n        <CardList monsters={filteredMonsters}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}